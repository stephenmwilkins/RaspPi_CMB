

import numpy as np
from matplotlib import pyplot as plt


def find_nearest(value, array):
    idx = (np.abs(array - value)).argmin()
    return array[idx]


Ob0_array = np.arange(0.02, 1.01, 0.02) # possible values of Ob0 as generated by generate_Cl_flat.py
Ocdm0_array = np.arange(0.02, 1.01, 0.02) # possible values of Ocdm0 as generated by generate_Cl_flat.py


Planck15_totCl = np.load('Cls/Planck15.npy') # --- read in Planck Cls


def plot_Pk(input_Ob0, input_Ocdm0):

    plt.plot(np.log10(np.arange(len(Planck15_totCl))),Planck15_totCl, color='k', lw = 3, alpha = 0.2) # --- plot Planck15 model P(k)

    nearest_Ob0 = find_nearest(input_Ob0, Ob0_array) # --- find nearest Ob0 
    nearest_Ocdm0 = find_nearest(input_Ocdm0, Ocdm0_array) # --- find nearest Ocdm0
        
    print('Omega_b: {0:.4f} -> {1:.2f}'.format(input_Ob0, nearest_Ob0))
    print('Omega_cdm: {0:.4f} -> {1:.2f}'.format(input_Ocdm0, nearest_Ocdm0))


    try:

        totCl = np.load('Cls/flat/{0:.2f}_{1:.2f}.npy'.format(nearest_Ob0, nearest_Ocdm0))
        plt.plot(np.log10(np.arange(len(totCl))),totCl, color='k')
    
    except:
    
        print('Could not find Cls')
    
    plt.xlim([1,3.3])
    plt.ylim([0,1E4])
    
    plt.show()
    
    
  
  
  
def main():    
    
    input_Ocdm0  = 0.234343 # arbitrary Ocdm0
    input_Ob0= 0.042284 # arbitrary Ob0 

    plot_Pk(input_Ob0, input_Ocdm0)



if __name__== "__main__":
  main()

